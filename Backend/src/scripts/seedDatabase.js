const { connectDatabase, neo4jDriver } = require('../config/database');
const { connectMongoDB, mongoose } = require('../config/mongodb');
const crypto = require('crypto');

// G√©n√©rateur de contenu al√©atoire
const randomSentences = [
    "Aujourd'hui, j'ai appris quelque chose de nouveau.",
    "Un jour parfait commence par une bonne tasse de caf√©.",
    "Ce post est g√©n√©r√© al√©atoirement pour tester la plateforme.",
    "La programmation, c'est comme la magie mais r√©elle.",
    "Le soleil brille m√™me apr√®s les jours nuageux.",
    "Connaissance partag√©e est connaissance doubl√©e.",
    "Est-ce que quelqu‚Äôun d‚Äôautre aime le JavaScript ici ?",
    "L‚Äô√©ducation change le monde, un √©l√®ve √† la fois.",
    "Chaque jour est une nouvelle opportunit√©.",
    "Post g√©n√©r√© pour des tests internes. Merci de l‚Äôignorer.",
    "Test #1 : L‚ÄôAPI fonctionne bien.",
    "Test #2 : Ce contenu est visible publiquement.",
    "Inspir√© par les √©toiles, motiv√© par la connaissance.",
    "J‚Äôappr√©cie vraiment la plateforme aujourd‚Äôhui.",
    "Un bug corrig√© est une victoire c√©l√©br√©e.",
    "Le savoir est un super-pouvoir.",
    "Apprendre n‚Äôest jamais une perte de temps.",
    "L‚Äôenseignement est un art autant qu‚Äôune science.",
    "Toujours curieux, toujours en train d‚Äôexplorer.",
    "Les tests passent, la paix r√®gne."
];

// G√©n√©ration de 20 posts al√©atoires
const posts = Array.from({ length: 20 }, () => ({
    content: randomSentences[Math.floor(Math.random() * randomSentences.length)],
    visibility: 'public',
    likesCount: Math.floor(Math.random() * 101) // 0 √† 100
}));

const seedDatabase = async () => {
    try {
        // Connexions aux bases
        await connectDatabase();
        await connectMongoDB();
        const session = neo4jDriver.session();

        console.log('üóëÔ∏è Suppression des anciens posts de Alice...');
        await session.run(
            'MATCH (p:Post)-[:AUTHORED]->(u:User {email: $email}) DETACH DELETE p',
            { email: 'test.student@test.com' }
        );

        console.log('üìù Cr√©ation de 20 nouveaux posts al√©atoires pour Alice...');
        for (const post of posts) {
            const id_post = crypto.randomUUID();
            await session.run(
                `
                MATCH (u:User {email: $email})
                CREATE (p:Post {
                    id_post: $id_post,
                    content: $content,
                    visibility: $visibility,
                    likesCount: $likesCount,
                    createdAt: datetime()
                })
                CREATE (u)-[:AUTHORED]->(p)
                `,
                {
                    email: 'test.student@test.com',
                    id_post,
                    content: post.content,
                    visibility: post.visibility,
                    likesCount: post.likesCount
                }
            );
        }

        console.log('‚úÖ 20 posts g√©n√©r√©s avec succ√®s pour Alice !');

        // Fermeture des connexions
        await session.close();
        await neo4jDriver.close();
        await mongoose.connection.close();

        process.exit(0);
    } catch (error) {
        console.error('‚ùå Erreur pendant le seed :', error);
        process.exit(1);
    }
};

seedDatabase();
